# SPDX-FileCopyrightText: 2023 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import datetime
import json
from uuid import UUID

import structlog
from fastapi.encoders import jsonable_encoder

from manager_terminator.autogenerated_graphql_client.client import GraphQLClient
from manager_terminator.autogenerated_graphql_client.get_managers import (
    GetManagersManagers,
)
from manager_terminator.autogenerated_graphql_client.get_managers import (
    GetManagersManagersObjects,
)
from manager_terminator.autogenerated_graphql_client.get_managers import (
    GetManagersManagersObjectsValidities,
)
from manager_terminator.autogenerated_graphql_client.get_managers import (
    GetManagersManagersObjectsValiditiesPersonEngagementsValidity,
)
from manager_terminator.models import InvalidManagerPeriod
from manager_terminator.utils import POSITIVE_INFINITY


logger = structlog.get_logger(__name__)


async def get(mo: GraphQLClient) -> list[GetManagersManagers]:
    """Fetches all manager objects from MO using GraphQL.

    Note: The GraphQL query fetches "objects" and not "current", since we want to examine
    all manager objects, even if they are not currently active.
    """

    gql_response = await mo.get_managers()
    return gql_response.objects


async def get_by_employee_uuids(
    mo: GraphQLClient, employee_uuids: list[UUID]
) -> list[GetManagersManagers]:
    gql_response = await mo.get_employee_managers(employee_uuids)
    return gql_response.objects


async def invalid_manager_periods(
    managers: list[GetManagersManagersObjects],
) -> list[InvalidManagerPeriod]:
    """Goes through a list of managers and returns periods, if any, where the manager is invalid.

    An invalid manager period, is a period where the manager validity is ACTIVE,
    but the related manager-employee does not have an ACTIVE engagement in *any* org_unit
    in the same period.

    ```
    Initial:
                ===================================================
    -----   ----------                ------------------         --------           ------------
                -----------
    Invalid periods:

                            |INVALID|                  |INVALID|
                ============         ==================         ===
    -----   ----------               ------------------         --------           ------------
                 -----------
    ```
    """
    all_invalid_periods = []
    for manager in managers:
        for manager_obj in manager.validities:
            valid_engagement_validities = [
                engagement.validity
                for manager_employee in manager_obj.person or []
                for engagement in manager_employee.engagements or []
            ]

            all_invalid_periods.extend(
                _find_gaps(manager_obj, valid_engagement_validities)
            )

    return all_invalid_periods


async def terminate_manager_periods(
    mo: GraphQLClient, periods: list[InvalidManagerPeriod]
) -> list[InvalidManagerPeriod]:
    terminated_manager_periods = []
    for period in periods:
        terminate_args = {
            "uuid": period.uuid,
            "terminate_from": period.from_.date(),
            "terminate_to": period.to.date(),
        }
        if period.to is POSITIVE_INFINITY:
            terminate_args["terminate_from"] = None
            terminate_args["terminate_to"] = (
                period.from_ - datetime.timedelta(days=1)
            ).date()

        try:
            terminated_manager_periods.append(
                await mo.terminate_manager(**terminate_args)
            )
        except Exception as e:
            logger.error(
                "Failed to terminate invalid manager period: %s"
                % json.dumps(jsonable_encoder(period))
            )
            raise e

    return terminated_manager_periods


async def update_manager_to_vacant(
    mo: GraphQLClient, periods: list[InvalidManagerPeriod]
) -> list[InvalidManagerPeriod]:
    updated_manager_periods = []
    for period in periods:
        update_args = {
            "uuid": period.uuid,
            "vacant_from": period.from_.date(),
            "vacant_to": period.to.date(),
        }

        if period.to is POSITIVE_INFINITY:
            update_args["vacant_to"] = None
            update_args["vacant_from"] = (
                period.from_ - datetime.timedelta(days=1)
            ).date()

        try:
            updated_manager_periods.append(await mo.update_manager(**update_args))
        except Exception as e:
            logger.error(
                "Failed to update invalid manager period to vacant: %s"
                % json.dumps(jsonable_encoder(period))
            )
            raise e

    return updated_manager_periods


# Helper methods for this module


def _find_gaps(
    manager: GetManagersManagersObjectsValidities,
    engagement_validities: list[
        GetManagersManagersObjectsValiditiesPersonEngagementsValidity
    ],
) -> list[InvalidManagerPeriod]:
    engagement_validities = sorted(engagement_validities, key=lambda x: x.from_)
    manager_end_date = manager.validity.to or POSITIVE_INFINITY

    # If there are no engagement_validities for the manager, then the entire manager validity is invalid
    if len(engagement_validities) < 1:
        return [
            InvalidManagerPeriod(
                uuid=manager.uuid,
                from_=manager.validity.from_,
                to=manager_end_date,
            )
        ]

    gaps = []

    # Check for the gap before the first period
    if manager.validity.from_ < engagement_validities[0].from_:
        gap_end_date = engagement_validities[0].from_ - datetime.timedelta(days=1)
        gaps.append(
            InvalidManagerPeriod(
                uuid=manager.uuid,
                from_=manager.validity.from_,
                to=min(
                    gap_end_date, manager_end_date
                ),  # Ensure the gap doesn't exceed the object's end date
            )
        )

    # Check for gaps between periods
    for i in range(len(engagement_validities) - 1):
        # If current period has no end date, then there won't be any more gaps
        if engagement_validities[i].to is None:
            continue

        next_start_date = engagement_validities[i + 1].from_
        current_end_date = engagement_validities[i].to

        # Check for a gap
        if current_end_date < next_start_date:
            invalid_from = current_end_date + datetime.timedelta(days=1)

            # Don't create a gap if it starts after the manager ends
            if invalid_from > manager_end_date:
                continue

            invalid_to = min(
                next_start_date - datetime.timedelta(days=1), manager_end_date
            )

            if invalid_to < invalid_from:
                # Happens when engagements are tightly aligned (no real gap)
                continue

            gaps.append(
                InvalidManagerPeriod(
                    uuid=manager.uuid,
                    from_=invalid_from,
                    to=invalid_to,
                )
            )
    # check if any of the engagments have a to_date = None, if not, check if the last period is invalid
    engagements_have_to_date_none = any(
        eng_validity.to is None for eng_validity in engagement_validities
    )
    if not engagements_have_to_date_none:
        last_period_end_date = engagement_validities[-1].to
        # Only consider a gap if the last engagement ends *before* the manager does
        if (
            last_period_end_date
            and last_period_end_date + datetime.timedelta(days=1) <= manager_end_date
        ):
            gaps.append(
                InvalidManagerPeriod(
                    uuid=manager.uuid,
                    from_=last_period_end_date + datetime.timedelta(days=1),
                    to=manager_end_date,
                )
            )

    # Only return gaps that are within the manager's validity
    invalid_manager_gaps = [
        gap
        for gap in gaps
        if gap.from_ <= manager_end_date
        and (gap.to is None or gap.to >= manager.validity.from_)
    ]

    return invalid_manager_gaps
