# SPDX-FileCopyrightText: 2023 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import structlog
from more_itertools import one

from manager_terminator.autogenerated_graphql_client import GraphQLClient
from manager_terminator.helper_functions import check_for_end_date
from manager_terminator.helper_functions import (
    get_latest_end_date_from_engagement_objects,
)
from manager_terminator.helper_functions import (
    get_manager_uuid_and_manager_end_date_if_in_same_org_unit,
)

logger = structlog.get_logger(__name__)


async def process_engagement_events(mo: GraphQLClient, engagement_uuid: UUID) -> None:
    """
    A function for handling the various events made involving a manager.
    This includes checking whether the persons engagement is active or
    has been ended, and whether the person assigned as the organisational
    manager, also has an end date that matches the persons engagements end date.

    Args:
        mo: A MO client to perform the various queries

        engagement_uuid: UUID of the engagement

    Returns:
        A successful termination of a manager position or None.
    """
    logger.info(
        "Listening on an engagement event with uuid:",
        engagement_uuid=engagement_uuid,
    )
    # Make a Graphql query to pull the engagement and its possible objects from MO.
    engagement_objects_as_models = await mo.get_engagement_objects(engagement_uuid)

    if not engagement_objects_as_models.objects:
        logger.info(
            "No engagement objects found - event might be a termination. End process."
        )
        return

    engagement_objects = one(one(engagement_objects_as_models.objects).objects)

    engagement_org_unit = engagement_objects.org_unit
    employee_objects = engagement_objects.employee

    try:
        # Person is not a manager, end the process.
        if len(one(employee_objects).manager_roles) == 0:
            logger.info("The person is not a manager. Event exited.")
            return

    except ValueError:
        logger.error("Could not find manager roles in employee object")

    # The engagement does not have an end date, exit event.
    if not check_for_end_date(engagement_org_unit, employee_objects):
        logger.info("No end dates found on the persons engagement(s). End event.")
        return

    # Check if the manager is in the same org unit as the engagement,
    # get the managers UUID.
    manager_termination_data = (
        get_manager_uuid_and_manager_end_date_if_in_same_org_unit(
            employee_objects, engagement_org_unit
        )
    )

    # Unpack data this way in case of None results, and avoiding "TypeError"
    # when trying to unpack NoneType.
    if manager_termination_data:
        manager_uuid, manager_end_date = manager_termination_data
    else:
        manager_uuid, manager_end_date = None, None

    # If manager role exists in same org unit as the engagement.
    if manager_uuid:
        # Get the farthest engagement end date, to terminate manager role on.
        farthest_engagement_date_retrieved = (
            get_latest_end_date_from_engagement_objects(
                employee_objects, manager_end_date
            )
        )

        # If None, the manager role will be terminated before the engagement end date.
        if farthest_engagement_date_retrieved is None:
            logger.info(
                "Manager will be terminated before farthest engagement. End event."
            )
            return

        await mo.terminate_manager(farthest_engagement_date_retrieved, manager_uuid)
        logger.info(
            "Terminating manager role on same date as farthest engagement end date."
        )
        return

    # Manager is supposedly being terminated before an active engagement ends - do nothing.
    else:
        logger.error(
            "The manager role might not exist in the same org unit as the engagement being"
            "created/updated/terminated."
        )
